#include "segtable.h"
#include "flash.h" //for device
#include <stdio.h>
#include <math.h>  //pow

extern struct ATABLE *active_table;
extern struct LEV0 * lev0_head;
extern char *table_finder_0;
extern char *lev0_tables[];
extern char *levels_summary;

void print_table(char *table){
	char *test=table;
	int i=0;
	int size=0;
	printf("cccccccccccc, table=%p\n",table);
	while(1){//print test			
			if(*test==0) break;
				printf("%d: key=%s, ", i++, test);
				size+=strlen(test)+1;
				test=test+strlen(test)+1;
				
				printf("value=%s,                        ", test);
				size+=strlen(test)+1;
				test=test+strlen(test)+1;	

				printf("size=%d\n",size);
	}
}
int merge1(){
	//printf("___________-I am merge1 begin,levels_summary=%p \n",levels_summary );
//step 1 make new active table for servingds
	struct ATABLE *active_table_old=active_table;//need to free //after constructing sorted table there is no use of this
	active_table=NULL;
	active_table = (struct ATABLE *)malloc(sizeof(struct ATABLE));//this should be able to serve new writes immediatly
	memset(active_table, 0 , sizeof(struct ATABLE));
//step 2 construct  sorted table from the active table
	struct KNODE *curr_node=active_table_old->key_head;//need to free, a linked list
	//printf("__merge1, active_table_old->kv_num=%d, active_table_old->size=%d\n",active_table_old->kv_num, active_table_old->size);
	int i;
	//sort the linked list --begin
	for(;curr_node->next!=NULL;){ 
	/*every cycle make the smallest remain knode  to the current position
	compare one by one with the following kcodes, if this is bigger, then exchange their KV data
	*/
		struct KNODE *stamp=curr_node;
		//printf("xxxxxxxxxxxxxxxx\n");
		for(;stamp->next!=NULL;){
			struct KNODE *no_name= stamp->next;
			
			if(strcmp(curr_node->key, no_name->key) ==0){//delete the repeated key nodes			
				stamp->next=no_name->next;
				free(no_name->key);
				free(no_name->value);				
				continue;
			}
			//printf("zzzzzzzzzzzzz\n");
			if(strcmp(curr_node->key, no_name->key) >0 ){//exchange the KV
				
				char *temp_key= no_name->key;
				char *temp_value= no_name->value;
				no_name->key= curr_node->key;
				no_name->value=curr_node->value;				
				curr_node->key=temp_key;
				curr_node->value=temp_value;
				
			}
			stamp=stamp->next;
		}
		//printf("end for\n");
		//printf("end for 1. curr_node=%p, curr_node->next=%p\n",curr_node,curr_node->next);
		if(curr_node->next==NULL) break; 
		curr_node=curr_node->next;//sort the next node
		//printf("end for 2. curr_node=%p\n",curr_node);
	}
	
	//sort the link list --end
	i=0;
	for(curr_node=active_table_old->key_head;curr_node!=NULL;curr_node=curr_node->next){
		//printf("%d: after sort, key=%s, value=%s\n",i++, curr_node->key, curr_node->value);
	}
	//construct a sorted table --begin
	char *sorted_active_table=malloc(test_seg_bytes);
	
	int copied_size=0;//indicates the total bytes of data have been copied to sorted_active_table
	for(curr_node=active_table_old->key_head;curr_node->next!=NULL;curr_node=curr_node->next){
		memcpy(sorted_active_table+copied_size, curr_node->key, strlen(curr_node->key)+1 );
		copied_size+=strlen(curr_node->key)+1;
		memcpy(sorted_active_table+copied_size, curr_node->value, strlen(curr_node->value)+1 );
		copied_size+=strlen(curr_node->value)+1;	
	}
	//leave the last for getting the last key without if clause --begin
	int last_key_offset=copied_size;
	memcpy(sorted_active_table+copied_size, curr_node->key, strlen(curr_node->key)+1 );
	copied_size+=strlen(curr_node->key)+1;
	memcpy(sorted_active_table+copied_size, curr_node->value, strlen(curr_node->value)+1 );
	copied_size+=strlen(curr_node->value)+1;
	char *active_first_key=sorted_active_table;//active_table_old->key_head->key;
	char *active_last_key=sorted_active_table+last_key_offset;//curr_node->key;
	printf("first_key:%s last_key:%s\n",active_first_key,active_last_key);
	//leave the last for getting the last key without if clause --end
	//set the table kv bytes and kv number --begin
	*(uint32_t*)(sorted_active_table+ test_seg_bytes - TABLE_END_RESERVED + TABLE_END_ZERO)=active_table_old->kv_bytes;
	*(uint32_t*)(sorted_active_table+ test_seg_bytes - TABLE_END_RESERVED + TABLE_END_ZERO + TABLE_END_KV_BYTES )=active_table_old->kv_num;
	//set the table kv bytes and kv number --begin
	//construct a sorted table --end
	printf("sorted_active_table:\n");
	print_table(sorted_active_table);
	/*
	int read_size=0;
	while(1){
		if(read_size>=test_seg_bytes) break;
		printf("%s ", sorted_active_table+read_size);
		read_size+=strlen(sorted_active_table)+1;
	}
	printf("---------\n");
	exit(2);
	*/
//step 3  find crossed tables and merge
	//find crossed tables in lev0 --begin
	
	int lev0_info[LEV0_NUM+1]={0};//the last is total crossed number //if not initialized, the value is not 0
	char find_first_key[FINDER_KEY_LENGTH];//record the current finding table's first key 
	char find_last_key[FINDER_KEY_LENGTH];//record the current finding table's last key 
	printf("before while,lev0_info[0],lev0_info[5]=%d\n",lev0_info[0],lev0_info[5]);
	
	//char last_key_for_update_entry[FINDER_KEY_LENGTH];//after finishing merging, there may be 
	//char entry_str[FINDRE_NUMBER_LENGTH];//to get entry_num
	//int entry_num=0;
	int if_no_cross_point=0;
	int base_entry=-1;
	int total_lev0=0;
		for(i=0;i< LEV0_NUM;i++){//find crossed table in lev0			
			//int res=fscanf(table_finder_0, "%s", find_first_key);
			//memcpy(entry_str, ( table_finder_0 +  (FINDER_KEY_LENGTH*2)*(entry_num) ), FINDRE_NUMBER_LENGTH );
			//entry_num=atoi)(entry_str);
			//if(entry_num==0){//no following table, end
				//break;
			//}
			//now there is a following table and its entry num has been set
			if(*( table_finder_0 + (FINDER_KEY_LENGTH*2)*(i) ) == 0){//blank entry
				break;
			}
			total_lev0++;
			memcpy(find_first_key, ( table_finder_0 + (FINDER_ENTRY_LENGTH)*(i) ), FINDER_KEY_LENGTH );
			memcpy(find_last_key, ( table_finder_0 + (FINDER_ENTRY_LENGTH)*(i) + FINDER_KEY_LENGTH ), FINDER_KEY_LENGTH );
			if(strcmp(active_last_key, find_first_key)<0 ){//no following crossings
				lev0_info[i]=3;
				break;
			}
			if( strcmp(active_first_key, find_last_key) >0){//doesn't cross	, but fowllings may be crossed
				lev0_info[i]=2;
				continue;
			}
			//now that comes here it must be crossed 
			if(base_entry==-1) base_entry=i;
			lev0_info[LEV0_NUM]++;//crossed table plus
			lev0_info[i]=1;//mark the table position as crossed 
			
			//strncpy(last_key_for_update_entry, find_last_key, FINDER_ENTRY_LENGTH);//this is wrong
			
			
		}
	if_no_cross_point=i;
	//find crossed tables in lev0 --end
	//now lev0_info[LEV0_NUM] is the total crossed tables number
	//and lev0_info[i] indicates table i is crossed table if its value is 1
	for(i=0;i<LEV0_NUM+1;i++){
		//printf("lev0_info[%d]=%d\n", i, lev0_info[i]);
	}
	
	// merge --begin
	if(lev0_info[LEV0_NUM]==0){//no crossed lev0 table. directly place		
		// update table_finder_0 entries--begin
		//first shoul move the entries on after if_no_cross_point by 1
				//moving code
				memcpy( ( table_finder_0 + (FINDER_ENTRY_LENGTH)*(if_no_cross_point) ),active_first_key ,strlen(active_first_key) );
				memcpy( ( table_finder_0 + (FINDER_ENTRY_LENGTH)*(if_no_cross_point) + FINDER_KEY_LENGTH  ),active_last_key ,strlen(active_last_key) );
		//update table_finder_0 entries --end
		//make the responsible lev0_tables[] pointer point to the table --begin		
		lev0_tables[if_no_cross_point]= sorted_active_table;
		
		//make the responsible lev0_tables[] pointer point to the table --end
		//update the levels_summary --begin
		//printf("_________________________\n");
		//printf("____________________________,levels_summary=%p, %d\n",levels_summary, *(int*)levels_summary);
		(*(int*)levels_summary)++;
		//update the levels_summary --end
	}
	else{//there are crossed tables,  need merge
		printf("I am, merge1, ***there are %d crossed tables in lev0!\n", lev0_info[LEV0_NUM]);
	//get the crossed tables' pointer --begin
		char *crossed_tables[lev0_info[LEV0_NUM]];//and sorted_active_table points to the merging table
		int j=0;
		for(i=0;i<LEV0_NUM;i++){
			if(lev0_info[i]==1){//1 indicates a crossed table 
				crossed_tables[j++]=lev0_tables[i];
				//printf("lev0_tables[%d]=%s\n",i,lev0_tables[i]);
				//exit(1);
			}
		}
		int crossed_num=j;//crossed table number
	//get the crossed tables' pointer --end
		for(i=0;i<crossed_num;i++){
			//printf("__________cross tabl %d:\n",i);
			//print_table(crossed_tables[i]);
		}
		
		
	//now let's really begin merging --begin
		//there are j crossed tables
		//1 allocate a big space that can contain all involved tables 
		char *big_table=(char*)malloc( (crossed_num+1)* test_seg_bytes );
		memset(big_table, 0 , (crossed_num+1)* test_seg_bytes);
		if(big_table==NULL){
			printf("In merge1, memory alloc failed for big table");
			exit(10);
		}
		int big_table_size=0;
		//2 merge all the tables to this big space --begin
		char *big_crossed_table=malloc( (crossed_num)* test_seg_bytes );
		if(big_crossed_table==NULL){
			printf("In merge1, memory alloc failed for big table");
			exit(10);
		}
		memset(big_crossed_table, 0, (crossed_num)* test_seg_bytes );
		
		for(i=0;i<crossed_num;i++){
			//uint32_t copy_size=*(uint32_t *) (crossed_tables[i] + test_seg_bytes - TABLE_END_RESERVED + TABLE_END_ZERO);
			char *advancer=crossed_tables[i];
			uint32_t copy_size;
			while(*advancer!=0){
				int kv_len=strlen(advancer)+1 + strlen(advancer+ strlen(advancer)+1 ) +1;
				copy_size+=kv_len;
				advancer+=kv_len;
				
			}
			memcpy(big_crossed_table,crossed_tables[i], copy_size );
		}
		char *sorted_table_advancer=sorted_active_table;
		char *big_cross_advancer=big_crossed_table;
		char *big_table_advancer=big_table;
		int kv_len;
printf("xxxxxxxxxxxxxxxxx\n");
		while(1){
			int res=strcmp(sorted_table_advancer,big_cross_advancer);
			if(res<=0){
				kv_len=strlen(sorted_table_advancer)+1 + strlen(sorted_table_advancer+ strlen(sorted_table_advancer)+1 ) +1;
				memcpy(big_table_advancer, sorted_table_advancer,kv_len );
				sorted_table_advancer += kv_len;
				big_table_advancer += kv_len;
				if(res==0){
					big_table_advancer += strlen(big_table_advancer) +1;//key
					big_table_advancer += strlen(big_table_advancer) +1;//value
				}
			}
			else{
				kv_len=strlen(big_cross_advancer)+1 + strlen(big_cross_advancer+ strlen(big_cross_advancer)+1 ) +1;
				memcpy(big_table_advancer, big_cross_advancer,kv_len );
				big_cross_advancer += kv_len;
				big_table_advancer += kv_len;
			}
			
			if(*sorted_table_advancer==0){
				while(*big_cross_advancer!=0){
					kv_len=strlen(big_cross_advancer)+1 + strlen(big_cross_advancer+ strlen(big_cross_advancer)+1 ) +1;
					memcpy(big_table_advancer, big_cross_advancer,kv_len );
					big_cross_advancer += kv_len;
					big_table_advancer += kv_len;
				}
				break;
			}
			if(*big_cross_advancer==0){
				while(*sorted_table_advancer!=0){
					kv_len=strlen(sorted_table_advancer)+1 + strlen(sorted_table_advancer+ strlen(sorted_table_advancer)+1 ) +1;
					memcpy(big_table_advancer, sorted_table_advancer,kv_len );
					sorted_table_advancer += kv_len;
					big_table_advancer += kv_len;
				}
				break;
			}
		}
		
		big_table_size=big_table_advancer- big_table;
		free(big_crossed_table);
		//2 merge all the tables to this big space --end
		printf("base_entry=%d, big_table_size=%d, (crossed_num+1)* test_seg_bytes=%d\n",base_entry,big_table_size,(crossed_num+1)* test_seg_bytes);
		char *test=big_table;
		i=0;
		printf("big_table:\n");
		print_table(big_table);
		
printf("11111111111111111111111111\n");		
		//3 caculate the the number of  big table splitted, if larger than the crossed tables by 1, then move all the following entries by 1
		//the base entry is the first crossed table //base_entry
		//if total tables do not increase, there is no need to move following entries
		//else we need to know the total numbers of the following entries
		//we can get total table numbers from ftl's levels_sumary
		int merging_result=lev0_info[LEV0_NUM]+1;//may be less
		/*
			here is the moving code
		*/
		//now splitting --begin 
		memset(table_finder_0+FINDER_ENTRY_LENGTH*base_entry,0, merging_result*FINDER_ENTRY_LENGTH);
		//manually splitting --begin
		big_table_advancer=big_table;
		int splitting_counter=0;
		int splitted_tables=0;
		char *manua_splitted_first_key[merging_result];
		manua_splitted_first_key[0]=big_table_advancer;
		char *manua_splitted_last_key[merging_result];
		char *start_pointer=big_table_advancer;//records the start point when splitting table
		//char *end_pointer;
		//char *first_pointer, *last_pointer;
		char *p0,*p1;//for recording two 
		//int splitting_flag=0;
printf("4444444444444444\n");	
		for(i=0;;i++){
			if(*big_table_advancer==0){
				break;
			}
			//printf("i=%d, splitting_counter=%d\n",i,splitting_counter);	
			//end_pointer=big_table_advancer;
			p0=p1;//if would split, p0 points to the last key
			p1=big_table_advancer;//and p1 points to the first key of the next table
			//manua_splitted_last_key[splitted_tables]=big_table_advancer;//for recording the last key
			
				
			int len_key= strlen(big_table_advancer)+1;
			big_table_advancer += len_key;//advances the key for the first time
			int len_value =strlen(big_table_advancer)+1;
			big_table_advancer += len_value; //advances the value 			
printf("7777777777777\n");				

			if( splitting_counter + len_key + len_value + TABLE_END_RESERVED > test_seg_bytes){//splitting
				//printf("11111111111111 lev0_tables[%d]=%p\n",base_entry+splitted_tables,lev0_tables[base_entry+splitted_tables]);
				//free(lev0_tables[base_entry+splitted_tables]);//free 
					printf("1111111111111 base_entry=%d, splitted_tables=%d\n", base_entry,splitted_tables);
				lev0_tables[base_entry+splitted_tables]=(char *)malloc(test_seg_bytes);
				
				memset(lev0_tables[base_entry+splitted_tables],0 , test_seg_bytes);
				printf("222222222222222 lev0_tables[%d]=%p\n", base_entry+splitted_tables, lev0_tables[base_entry+splitted_tables]);
				//printf("start_pointer-temp=%d\n",start_pointer-temp);temp
				memcpy( lev0_tables[base_entry+splitted_tables], start_pointer, p1-start_pointer);
				//printf("3333333333333\n");
				manua_splitted_last_key[splitted_tables]=p0;
				splitted_tables++;
				splitting_counter=len_key+len_value;//should 0;
				
				manua_splitted_first_key[splitted_tables]=p1;
				start_pointer=p1;//resetg the start pointer
				
				//big_table_advancer += TABLE_END_RESERVED; //advance over the TABLE_END_RESERVED
			}
printf("8888888888888888\n");	
			splitting_counter += len_key + len_value;
			
		}

		printf("________splitted_tables=%d\n", splitted_tables);
		//process the tail  --begin
		//free(lev0_tables[base_entry+splitted_tables]);
		if(base_entry+splitted_tables<5)  lev0_tables[base_entry+splitted_tables]=(char *)malloc(test_seg_bytes);
		manua_splitted_last_key[splitted_tables]=p1;
		memset(lev0_tables[base_entry+splitted_tables],0 , test_seg_bytes);
		memcpy( lev0_tables[base_entry+splitted_tables], start_pointer, big_table_advancer-start_pointer);
		//process the tail  --end
		splitted_tables++;
		//update levels_summary --begin
		//printf("_________________________sp,splitted_tables=%d\n",splitted_tables);
		if(splitted_tables> lev0_info[LEV0_NUM]){
			//printf("_________________________splitted_tables=%d, lev0_info[LEV0_NUM]=%d\n",splitted_tables, lev0_info[LEV0_NUM]);
			( *(int*) levels_summary)++;
		}
		//update levels_summary --end
		//manually splitting --end
		
		for(i=0;i<splitted_tables;i++){
			//printf("manua_splitted_first_key[%d]=%s\n",i,manua_splitted_first_key[i] );
			//printf("manua_splitted_last_key[%d]=%s\n",i,manua_splitted_last_key[i] );
		}
		//update the entries --begin
		for(i=0;i<splitted_tables;i++){
			memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry+i), manua_splitted_first_key[i], strlen(manua_splitted_first_key[i]) );
			memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry+i)+FINDER_KEY_LENGTH, manua_splitted_last_key[i], strlen(manua_splitted_last_key[i]) );
		}
		//update the entries --end
		
		//splitting --end
		//3 end
		//4 split the big table, and write the entries
	//now let's really begin merging --end
		//exit(1);
		if( lev0_info[LEV0_NUM] >=3){
			//exit(2);
		}
	
		//free big table
		free(big_table);
	}//end else that there are crossed tables
	//exit(1);
	// merge --end
	
	//free pointers --begin
	//free struct ATABLE *active_table_old
	for(curr_node=active_table_old->key_head;curr_node->next!=NULL;curr_node=curr_node->next){
		free(curr_node->key);
		free(curr_node->value);
		
			//free big table
	}
	//free(active_table_old);
	//active_table_old=NULL;
	
	//free pointers --end
	//printf("___________-I am merge1 end,levels_summary=%p \n",levels_summary );
printf("9999999999999\n");	
	printf("merge1 end\n");
	return 1;
}


/*printf("merging_result=%d, split_num=%d,base_entry=%d,splitted_last_key[0]=%s \n",merging_result,split_num, base_entry,splitted_last_key[0]);
		lev0_tables[base_entry]=big_table;
		int splitted_advancer=0;
		
		splitted_last_key[merging_result-1]=last_key_for_update_entry;
		printf("last_key_for_update_entry=%s,splitted_last_key[0]=%s \n",last_key_for_update_entry,splitted_last_key[0]);
		memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry), big_table, strlen(big_table) );
		memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry)+FINDER_KEY_LENGTH, splitted_last_key[0], strlen(splitted_last_key[0]) );
		//exit(2);
		
		for(i=1;i<merging_result;i++){
			splitted_advancer+=splitted_mark[i-1];
			printf("splitted_mark[%d]=%d, splitted_advancer=%d\n",i-1, splitted_mark[i-1], splitted_advancer);
			//if(splitted_mark[i]==0) break;
			lev0_tables[base_entry+i]=big_table+splitted_advancer;
			//update entries --begin
			memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry+i), lev0_tables[base_entry+i], strlen(lev0_tables[base_entry+i]) );
			memcpy(table_finder_0+ FINDER_ENTRY_LENGTH*(base_entry+i)+FINDER_KEY_LENGTH, splitted_last_key[i], strlen(splitted_last_key[i]) );
			//update entries --end
			
		}
		*/

		//int splitted_mark[crossed_num+1] ;
					//for(i=0;i<crossed_num+1;i++) splitted_mark[i]=0;
					//char *splitted_first_key[crossed_num+1];//[FINDER_KEY_LENGTH] ;
					//char *splitted_last_key[crossed_num+1];//[FINDER_KEY_LENGTH] ;
		//int split_num=0;//for splitted_mark[crossed_num+1] ;//we manually split big table int the later
		//int split_first_key_flag=1;
					/*
					if(split_first_key_flag==1){
						splitted_first_key[split_num]=smaller_andvancer;
						split_first_key_flag=0;
					}
					*/
					//come to here, there may not have 
					//if(splitted_mark[split_num]+ key_length + value_length + TABLE_END_RESERVED >test_seg_bytes) {//splitting
						//printf("temp=%s\n",temp);
						//exit(1);
						//splitted_last_key[split_num]=temp;
						//split_first_key_flag=1;
						//memset(big_table+big_table_size, 0, TABLE_END_RESERVED);//set table reserved tail
						//big_table_size+= TABLE_END_RESERVED;
						//splitted_mark[split_num]+= TABLE_END_RESERVED;
						//split_num++;
					//}
					//splitted_mark[split_num]+= key_length + value_length;
					
					
					
/*
//2 
//prepare for merging --begin
		
		//char *sorted_table_advancer=sorted_active_table;//this
		//char *curr_crossed_advancer;		//the current merging crossed table
		//indicates the state of the big tbale size
		
		char *bigger, *smaller,*smaller_andvancer;//for merging
		//curr_crossed_advancer=crossed_tables[0];
		//in the beginning, it need to decide which is smaller --begin
		
		//in the beginning, it need to decide which is smaller --end
		//prepare for merging --end
		
		smaller=crossed_tables[0];
		bigger=sorted_active_table;
		int bigger_is_active=1;
		for(i=0;i<crossed_num;i++){//merge one table a time		
			int smaller_to_end=0;
			int bigger_to_end=0;
			//every time comes here, the smaller is certainly pointing the crossed table, so if equal happens we can safely ignore the smaller's KV
			if(strcmp(smaller, bigger) ==0){//at most only one key is equal, so use if() clause 
				if(bigger_is_active){
					smaller=smaller+strlen(smaller)+1;//key
					smaller=smaller+strlen(smaller)+1;//value
					if(*smaller==0){
						break;
					}
				}
				else{
					bigger=bigger+strlen(bigger)+1;//key
					bigger=bigger+strlen(bigger)+1;//value
					if(*bigger==0){
						bigger_to_end=smaller;
						break;
					}
				}
			}
			if(strcmp(smaller, bigger) >0 ){//if smaller is bigger than bigger, exchange them
				char *temp =smaller;
				smaller=bigger;
				bigger=temp;
				bigger_is_active=!bigger_is_active;
			}
			smaller_andvancer=smaller;	//set the advancer point
			
			//printf("FFFFFFFFFFFFFFFFFFFFF,new table, smaller_value=%s, bigger=%s\n",smaller+strlen(smaller)+1,bigger);
			//printf("in for, i=%d\n",i);
				//merge a block of KVs --begin
			
			while(1){//after this cycle, a table reaches its end
				
				while(1){//after this loop, a block of data is selected to merge in to big_tbale
					//printf("in for, 0000\n");
					if(*smaller_andvancer==0){//this table comes to the end;
						smaller_to_end=1;
						break;
					}
					char *temp=smaller_andvancer;
					//key_length=strlen(smaller_andvancer) +1;
					smaller_andvancer=smaller_andvancer + strlen(smaller_andvancer) +1;
					//printf("in for, 11111\n");
					//value_length=strlen(smaller_andvancer) +1;
					smaller_andvancer=smaller_andvancer + strlen(smaller_andvancer) +1;//advanced to next key
					
					
					//printf("in for, 2222\n");
					if( strcmp(smaller_andvancer, bigger)<0 ){//if bigger or equal, stop advancing
						continue;
						//
					}
					//to here the smaller has advanced to bigger than the bigger
					break;
				}//end while inner
				//printf("in for, before memcpy\n");
				
				
				//merge the equals --begin
					//may be smaller would to end
				int copy_size=smaller_andvancer-smaller;
				if(bigger_is_active){
					smaller_andvancer=smaller_andvancer+strlen(smaller_andvancer)+1;
					smaller_andvancer=smaller_andvancer+strlen(smaller_andvancer)+1;
					if(*smaller_andvancer==0){//this table comes to the end;
						smaller_to_end=1;
					}
				}
				else{//smaller is active //may be bigger to end
					bigger=bigger+strlen(bigger)+1;//key
					bigger=bigger+strlen(bigger)+1;//value
					if(*bigger==0) bigger_to_end=1;
				}
				//merge the equals --end
				memcpy(big_table+big_table_size, smaller, copy_size);
				big_table_size+=  copy_size;
				//printf("in for, after memcpy\n");
				//process smaller to end --begin
				if(smaller_to_end==1){//it is certainly the crossed table to end
					//go to the next table		
					if( (i+1)>=crossed_num ){
							//here we should record the remain table, the bigger
							break;//break the while1, and the for cycle would also finish
					}					
					smaller=crossed_tables[i+1];//how do you know it is crossing table but active table comes to the end?
					//printf("IIIIIIIIIIIIIIIII,smaller=%s, bigger=%s\n ",smaller, bigger);
											//because if active table comes to end, the crossing table must be the last one
												// so the prior code would break;
					//smaller_andvancer=smaller;
					break;//break the while outer, the for cycle will go on for the next crossing table
				}
				//process smaller to end --end
				if(bigger_to_end==1){//it is certainly the crossed table to end
					if( (i+1)>=crossed_num ){
							//here we should record the remain table, the bigger
							break;//break the while1, and the for cycle would also finish
					}	
					bigger=crossed_tables[i+1];
					break;
				}
				
				
				//go on merge this table for another block
				//exchange bigger and smaller --begin
				smaller=bigger;
				bigger=smaller_andvancer;
				smaller_andvancer=smaller;
				bigger_is_active=!bigger_is_active;
				//exchange bigger and smaller --end
				//merge a block of KVs --end
			}//end while outer
			//a table is completed merging, now the bigger should point to somewhere in the sorted table
				//the small point to 
			//printf("bigger=%s ,smaller=%s\n",bigger,smaller_andvancer);		
		}//end for

		//copy the tail of the bigger --begin
		char *bigger_tail=bigger;
		int tail_length=0;
		//find the tail's end --begin
		printf(" bigger=%s\n",bigger);
		while(1){// if we have table's size, this process could be simplified
			//printf("bigger_tail=%s \n",bigger_tail );
			if(*bigger_tail==0) break;//comes to the end
			int length=strlen(bigger_tail)+1;	
			tail_length += length;
			bigger_tail += length;
		}
		//find the tail's end --end
		printf(" big_table_size=%d\n",big_table_size);
		memcpy(big_table+big_table_size, bigger, tail_length );//copy the tail to big_table
		big_table_size+=tail_length;
		//copy the tail of the bigger --end
		//free sorted table --begin
		free(sorted_active_table);
		//free sorted table --end


//2 end


*/